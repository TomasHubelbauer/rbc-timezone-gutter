{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","state","leftTimeZone","moment","tz","zone","rightTimeZone","modal","components","timeGutterHeader","react_default","a","createElement","className","title","_this","name","onClick","handleIconSpanClick","getVulgarUtcOffsetText","utcOffset","Date","now","handleSwitchLeftTimeZoneButtonClick","abbr","handleSwitchRightTimeZoneButtonClick","timeSlotWrapper","props","typedProps","undefined","resource","dateAndTimeUtc","utc","value","dateAndTimeTzLeft","clone","dateAndTimeTzRight","format","children","event","alert","currentTarget","setState","side","search","handleSwitchTimeZoneSearchInputChange","Error","Object","objectSpread","handleSwitchTimeZoneSelectChange","handleCloseModalButtonClick","offsetMinutes","offsetSign","Math","sign","offsetHours","abs","floor","offsetHoursFraction","toFixed","substring","concat","offsetFraction","_this2","this","results","names","map","n","vulgarOffset","fractionalOffset","getFractionalUtcOffsetText","filter","toUpperCase","includes","onChange","placeholder","ref","focus","size","key","Fragment","react_big_calendar_esm","localizer","events","defaultView","scrollToTime","createPortal","renderSwitchModal","document","body","Component","BigCalendar","momentLocalizer","start","startOf","toDate","end","endOf","add","render","App_App","getElementById"],"mappings":"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","file":"static/js/main.c16d6103.chunk.js","sourcesContent":["import './App.css';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport React, { Component, ReactElement, ChangeEventHandler, MouseEventHandler } from 'react';\nimport BigCalendar, { Components } from 'react-big-calendar';\nimport moment, { MomentZone } from 'moment';\nimport tz from 'moment-timezone';\nimport { createPortal } from 'react-dom';\n\ntype AppState = {\n  leftTimeZone: MomentZone;\n  rightTimeZone: MomentZone;\n  modal: null | { side: 'left' | 'right'; search: string; };\n};\n\nexport default class App extends Component<{}, AppState> {\n  public readonly state: AppState = {\n    leftTimeZone: moment.tz.zone('America/New_York')!,\n    rightTimeZone: moment.tz.zone('Europe/Prague')!,\n    modal: null,\n  };\n\n  private static readonly localizer = BigCalendar.momentLocalizer(moment);\n\n  private static readonly events = [\n    {\n      title: 'This day',\n      start: moment().startOf('day').toDate(),\n      end: moment().endOf('day').toDate(),\n    },\n    {\n      title: 'Now for an hour',\n      start: moment().toDate(),\n      end: moment().add(1, 'hour').toDate(),\n    }\n  ];\n\n  private components: Components = {\n    timeGutterHeader: () => {\n      return (\n        // Note that `rbc-time-header-gutter` is to have the header dynamically strethed to match the width of the gutter by RBC\n        <div className=\"gutterSplit rbc-time-header-gutter\">\n          <span>\n            <span title={this.state.leftTimeZone.name} onClick={this.handleIconSpanClick}>{this.getVulgarUtcOffsetText(this.state.leftTimeZone.utcOffset(Date.now()))}</span>\n            <button onClick={this.handleSwitchLeftTimeZoneButtonClick}>…</button>\n            <span>{this.state.leftTimeZone.abbr(Date.now())}</span>\n          </span>\n          <span>UTC</span>\n          <span>\n            <span title={this.state.rightTimeZone.name} onClick={this.handleIconSpanClick}>{this.getVulgarUtcOffsetText(this.state.rightTimeZone.utcOffset(Date.now()))}</span>\n            <button onClick={this.handleSwitchRightTimeZoneButtonClick}>…</button>\n            <span>{this.state.rightTimeZone.abbr(Date.now())}</span>\n          </span>\n        </div>\n      );\n    },\n    timeSlotWrapper: (props) => {\n      const typedProps: { value: Date, resource: null | undefined, children: ReactElement } = props as any;\n      if (typedProps.resource === undefined) {\n        const dateAndTimeUtc = moment.utc(typedProps.value);\n        const dateAndTimeTzLeft = dateAndTimeUtc.clone().tz(this.state.leftTimeZone.name);\n        const dateAndTimeTzRight = dateAndTimeUtc.clone().tz(this.state.rightTimeZone.name);\n        return (\n          <div className=\"gutterSplit rbc-time-slot\">\n            <span title={dateAndTimeTzLeft.format()}>\n              {dateAndTimeTzLeft.format('HH:mm A')}\n            </span>\n            <span title={dateAndTimeUtc.format()}>\n              {dateAndTimeUtc.format('HH:mm A')}\n            </span>\n            <span title={dateAndTimeTzRight.format()}>\n              {dateAndTimeTzRight.format('HH:mm A')}\n            </span>\n          </div>\n        );\n      }\n\n      return typedProps.children;\n    },\n  };\n\n  private getVulgarUtcOffsetText(offsetMinutes: number) {\n    const offsetSign = ['+', '', '-'][Math.sign(offsetMinutes / 60) + 1 /* Convert sign -1 | 0 | 1 to index 0 | 1 | 2 */];\n    const offsetHours = Math.abs(Math.floor(offsetMinutes / 60));\n    let offsetHoursFraction = (Math.abs(offsetMinutes / 60) % 1).toFixed(2).substring(1) /* Discard 0 leaving fraction */;\n\n    // http://unicodefractions.com/\n    switch (offsetHoursFraction) {\n      case '.00': offsetHoursFraction = ''; break;\n      case '.25': offsetHoursFraction = `¼`; break;\n      case '.50': offsetHoursFraction = `½`; break;\n      case '.75': offsetHoursFraction = `¾`; break;\n    }\n\n    return `UTC${offsetSign}${offsetHours || ''}${offsetHoursFraction}`;\n  }\n\n  private getFractionalUtcOffsetText(offsetMinutes: number) {\n    const offsetSign = ['+', '', '-'][Math.sign(offsetMinutes / 60) + 1 /* Convert sign -1 | 0 | 1 to index 0 | 1 | 2 */];\n    const offsetFraction = offsetMinutes / 60; // 0.5\n    return `UTC${offsetSign}${offsetFraction}`;\n  }\n\n  private renderSwitchModal() {\n    if (this.state.modal === null) {\n      throw new Error('Invalid state');\n    }\n\n    let value = '';\n    switch (this.state.modal.side) {\n      case 'left': value = this.state.leftTimeZone.name; break;\n      case 'right': value = this.state.rightTimeZone.name; break;\n    }\n\n    const search = this.state.modal.search;\n    const results = moment.tz.names()\n      .map(n => moment.tz.zone(n)!)\n      .map(tz => ({ name: tz.name, offsetMinutes: tz.utcOffset(Date.now()) }))\n      .map(tz => ({ name: tz.name, vulgarOffset: this.getVulgarUtcOffsetText(tz.offsetMinutes), fractionalOffset: this.getFractionalUtcOffsetText(tz.offsetMinutes) }))\n\n      // Search the time zone name, vulgar offset and fractional offset to be able to search all time zones with a given offset\n      .filter(tz => (tz.name.toUpperCase() + ' ' + tz.vulgarOffset + ' ' + tz.fractionalOffset).includes(search.toUpperCase()));\n\n    return (\n      <div className=\"modal\">\n        <div>\n          Change the {this.state.modal.side} time zone\n          <button title=\"Close\" onClick={this.handleCloseModalButtonClick}>✕</button>\n        </div>\n        <input value={this.state.modal.search} onChange={this.handleSwitchTimeZoneSearchInputChange} placeholder=\"Search: 'prague', '-2', '.75', …\" ref={n => n && n.focus()} />\n        <select value={value} onChange={this.handleSwitchTimeZoneSelectChange} size={20}>\n          {results.map(tz => <option value={tz.name} key={tz.name}>{tz.name} {tz.vulgarOffset}</option>)}\n        </select>\n      </div>\n    );\n  }\n\n  private readonly handleIconSpanClick: MouseEventHandler<HTMLSpanElement> = event => {\n    alert(event.currentTarget.title);\n  };\n\n  private readonly handleSwitchLeftTimeZoneButtonClick = () => {\n    this.setState({ modal: { side: 'left', search: '' } });\n  };\n\n  private readonly handleSwitchRightTimeZoneButtonClick = () => {\n    this.setState({ modal: { side: 'right', search: '' } });\n  };\n\n  private readonly handleSwitchTimeZoneSearchInputChange: ChangeEventHandler<HTMLInputElement> = event => {\n    const search = event.currentTarget.value;\n    this.setState(state => {\n      if (state.modal === null) {\n        throw new Error('Invalid state');\n      }\n\n      return { modal: { ...state.modal, search } };\n    });\n  };\n\n  private readonly handleSwitchTimeZoneSelectChange: ChangeEventHandler<HTMLSelectElement> = event => {\n    if (this.state.modal === null) {\n      throw new Error('Invalid state');\n    }\n\n    const tz = moment.tz.zone(event.currentTarget.value)!;\n    switch (this.state.modal.side) {\n      case 'left': this.setState({ leftTimeZone: tz, modal: null }); return;\n      case 'right': this.setState({ rightTimeZone: tz, modal: null }); return;\n    }\n\n    throw new Error('Called in an invalid state.');\n  };\n\n  private readonly handleCloseModalButtonClick = () => {\n    this.setState({ modal: null });\n  }\n\n  public render() {\n    // Note that a reference to `tz` needs to be kept otherwise it gets compiled away even though it is needed for `moment.tz`\n    void tz;\n    return (\n      <>\n        <BigCalendar localizer={App.localizer} events={App.events} components={this.components} defaultView=\"week\" scrollToTime={new Date()} />\n        {this.state.modal && createPortal(this.renderSwitchModal(), document.body)}\n      </>\n    );\n  }\n};\n","import './index.css';\nimport React from 'react';\nimport { render } from 'react-dom';\nimport App from './App';\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}