{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","state","leftTimeZone","moment","tz","zone","rightTimeZone","modal","components","timeGutterHeader","react_default","a","createElement","className","_this","abbr","Date","now","renderUtcOffset","title","name","onClick","handleSwitchLeftTimeZoneButtonClick","handleSwitchRightTimeZoneButtonClick","timeSlotWrapper","props","typedProps","undefined","resource","dateAndTimeUtc","utc","value","dateAndTimeTzLeft","clone","dateAndTimeTzRight","format","children","setState","handleSwitchTimeZoneSelectChange","event","currentTarget","Error","handleCloseModalButtonClick","offsetMinutes","utcOffset","offsetSign","Math","sign","offsetHours","abs","floor","offsetHoursFraction","toFixed","substring","concat","_this2","this","onChange","size","names","map","n","Fragment","react_big_calendar_esm","localizer","events","defaultView","createPortal","renderSwitchModal","document","body","Component","BigCalendar","momentLocalizer","start","startOf","toDate","end","endOf","add","render","App_App","getElementById"],"mappings":"2TAcqBA,6MACHC,MAAkB,CAChCC,aAAcC,IAAOC,GAAGC,KAAK,oBAC7BC,cAAeH,IAAOC,GAAGC,KAAK,iBAC9BE,MAAO,QAkBDC,WAAyB,CAC/BC,iBAAkB,WAChB,OAEEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sCACbH,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,YAAOE,EAAKb,MAAMC,aAAaa,KAAKC,KAAKC,QACzCP,EAAAC,EAAAC,cAAA,YAAOE,EAAKI,gBAAgBJ,EAAKb,MAAMC,eACvCQ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAWM,MAAOL,EAAKb,MAAMC,aAAakB,MAA1D,KACAV,EAAAC,EAAAC,cAAA,UAAQS,QAASP,EAAKQ,qCAAtB,WAEFZ,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,YAAOE,EAAKb,MAAMK,cAAcS,KAAKC,KAAKC,QAC1CP,EAAAC,EAAAC,cAAA,YAAOE,EAAKI,gBAAgBJ,EAAKb,MAAMK,gBACvCI,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAWM,MAAOL,EAAKb,MAAMK,cAAcc,MAA3D,KACAV,EAAAC,EAAAC,cAAA,UAAQS,QAASP,EAAKS,sCAAtB,aAKRC,gBAAiB,SAACC,GAChB,IAAMC,EAAkFD,EACxF,QAA4BE,IAAxBD,EAAWE,SAAwB,CACrC,IAAMC,EAAiB1B,IAAO2B,IAAIJ,EAAWK,OACvCC,EAAoBH,EAAeI,QAAQ7B,GAAGU,EAAKb,MAAMC,aAAakB,MACtEc,EAAqBL,EAAeI,QAAQ7B,GAAGU,EAAKb,MAAMK,cAAcc,MAC9E,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAAA,QAAMO,MAAOa,EAAkBG,UAC5BH,EAAkBG,OAAO,YAE5BzB,EAAAC,EAAAC,cAAA,QAAMO,MAAOe,EAAmBC,UAC7BD,EAAmBC,OAAO,aAMnC,OAAOT,EAAWU,aAsCLd,oCAAsC,WACrDR,EAAKuB,SAAS,CAAE9B,MAAO,YAGRgB,qCAAuC,WACtDT,EAAKuB,SAAS,CAAE9B,MAAO,aAGR+B,iCAA0E,SAAAC,GACzF,IAAMnC,EAAKD,IAAOC,GAAGC,KAAKkC,EAAMC,cAAcT,OAC9C,OAAQjB,EAAKb,MAAMM,OACjB,IAAK,OAA0D,YAAlDO,EAAKuB,SAAS,CAAEnC,aAAcE,EAAIG,MAAO,OACtD,IAAK,QAA4D,YAAnDO,EAAKuB,SAAS,CAAE/B,cAAeF,EAAIG,MAAO,OAG1D,MAAM,IAAIkC,MAAM,kCAGDC,4BAA8B,WAC7C5B,EAAKuB,SAAS,CAAE9B,MAAO,uFArDDF,GACtB,IAAMsC,EAAgBtC,EAAKuC,UAAU5B,KAAKC,OACpC4B,EAAa,CAAC,IAAK,GAAI,KAAKC,KAAKC,KAAKJ,EAAgB,IAAM,GAC5DK,EAAcF,KAAKG,IAAIH,KAAKI,MAAMP,EAAgB,KACpDQ,GAAuBL,KAAKG,IAAIN,EAAgB,IAAM,GAAGS,QAAQ,GAAGC,UAAU,GAElF,OAAQF,GACN,IAAK,MAAOA,EAAsB,GAAI,MACtC,IAAK,MAAOA,EAAmB,OAAQ,MACvC,IAAK,MAAOA,EAAmB,OAAQ,MACvC,IAAK,MAAOA,EAAmB,OAGjC,YAAAG,OAAaT,GAAbS,OAA0BN,GAAe,IAAzCM,OAA8CH,+CAGpB,IAAAI,EAAAC,KACtBzB,EAAQ,GACZ,OAAQyB,KAAKvD,MAAMM,OACjB,IAAK,OAAQwB,EAAQyB,KAAKvD,MAAMC,aAAakB,KAAM,MACnD,IAAK,QAASW,EAAQyB,KAAKvD,MAAMK,cAAcc,KAGjD,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,cACc2C,KAAKvD,MAAMM,MADzB,iBAEEG,EAAAC,EAAAC,cAAA,UAAQmB,MAAOA,EAAO0B,SAAUD,KAAKlB,iCAAkCoB,KAAM,IAC1EvD,IAAOC,GAAGuD,QAAQC,IAAI,SAAAC,GAAC,OAAInD,EAAAC,EAAAC,cAAA,UAAQmB,MAAO8B,GAAIA,EAAnB,IAAuBN,EAAKrC,gBAAgBf,IAAOC,GAAGC,KAAKwD,QAEzFnD,EAAAC,EAAAC,cAAA,UAAQS,QAASmC,KAAKd,6BAAtB,2CA8BJ,OADKtC,IAEHM,EAAAC,EAAAC,cAAAF,EAAAC,EAAAmD,SAAA,KACEpD,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAaC,UAAWhE,EAAIgE,UAAWC,OAAQjE,EAAIiE,OAAQzD,WAAYgD,KAAKhD,WAAY0D,YAAY,SACnGV,KAAKvD,MAAMM,OAAS4D,uBAAaX,KAAKY,oBAAqBC,SAASC,cA9H5CC,aAAZvE,EAOKgE,UAAYQ,IAAYC,gBAAgBtE,KAP7CH,EASKiE,OAAS,CAC/B,CACE9C,MAAO,WACPuD,MAAOvE,MAASwE,QAAQ,OAAOC,SAC/BC,IAAK1E,MAAS2E,MAAM,OAAOF,UAE7B,CACEzD,MAAO,kBACPuD,MAAOvE,MAASyE,SAChBC,IAAK1E,MAAS4E,IAAI,OAAQ,GAAGH,WC3BnCI,iBAAOtE,EAAAC,EAAAC,cAACqE,EAAD,MAASZ,SAASa,eAAe","file":"static/js/main.4d4c47f3.chunk.js","sourcesContent":["import './App.css';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport React, { Component, ReactElement, ChangeEventHandler } from 'react';\nimport BigCalendar, { Components } from 'react-big-calendar';\nimport moment, { MomentZone } from 'moment';\nimport tz from 'moment-timezone';\nimport { createPortal } from 'react-dom';\n\ntype AppState = {\n  leftTimeZone: MomentZone;\n  rightTimeZone: MomentZone;\n  modal: 'left' | 'right' | null;\n};\n\nexport default class App extends Component<{}, AppState> {\n  public readonly state: AppState = {\n    leftTimeZone: moment.tz.zone('America/New_York')!,\n    rightTimeZone: moment.tz.zone('Europe/Prague')!,\n    modal: null,\n  };\n\n  private static readonly localizer = BigCalendar.momentLocalizer(moment);\n\n  private static readonly events = [\n    {\n      title: 'This day',\n      start: moment().startOf('day').toDate(),\n      end: moment().endOf('day').toDate(),\n    },\n    {\n      title: 'Now for an hour',\n      start: moment().toDate(),\n      end: moment().add('hour', 1).toDate(),\n    }\n  ];\n\n  private components: Components = {\n    timeGutterHeader: () => {\n      return (\n        // Note that `rbc-time-header-gutter` is to have the header dynamically strethed to match the width of the gutter by RBC\n        <div className=\"gutterSplit rbc-time-header-gutter\">\n          <span>\n            <span>{this.state.leftTimeZone.abbr(Date.now())}</span>\n            <span>{this.renderUtcOffset(this.state.leftTimeZone)}</span>\n            <span className=\"infoIcon\" title={this.state.leftTimeZone.name}>i</span>\n            <button onClick={this.handleSwitchLeftTimeZoneButtonClick}>…</button>\n          </span>\n          <span>\n            <span>{this.state.rightTimeZone.abbr(Date.now())}</span>\n            <span>{this.renderUtcOffset(this.state.rightTimeZone)}</span>\n            <span className=\"infoIcon\" title={this.state.rightTimeZone.name}>i</span>\n            <button onClick={this.handleSwitchRightTimeZoneButtonClick}>…</button>\n          </span>\n        </div>\n      );\n    },\n    timeSlotWrapper: (props) => {\n      const typedProps: { value: Date, resource: null | undefined, children: ReactElement } = props as any;\n      if (typedProps.resource === undefined) {\n        const dateAndTimeUtc = moment.utc(typedProps.value);\n        const dateAndTimeTzLeft = dateAndTimeUtc.clone().tz(this.state.leftTimeZone.name);\n        const dateAndTimeTzRight = dateAndTimeUtc.clone().tz(this.state.rightTimeZone.name);\n        return (\n          <div className=\"gutterSplit rbc-time-slot\">\n            <span title={dateAndTimeTzLeft.format()}>\n              {dateAndTimeTzLeft.format('HH:mm A')}\n            </span>\n            <span title={dateAndTimeTzRight.format()}>\n              {dateAndTimeTzRight.format('HH:mm A')}\n            </span>\n          </div>\n        );\n      }\n\n      return typedProps.children;\n    },\n  };\n\n  private renderUtcOffset(zone: MomentZone) {\n    const offsetMinutes = zone.utcOffset(Date.now());\n    const offsetSign = ['+', '', '-'][Math.sign(offsetMinutes / 60) + 1 /* Convert sign -1 | 0 | 1 to index 0 | 1 | 2 */];\n    const offsetHours = Math.abs(Math.floor(offsetMinutes / 60));\n    let offsetHoursFraction = (Math.abs(offsetMinutes / 60) % 1).toFixed(2).substring(1) /* Discard 0 leaving fraction */;\n    // http://unicodefractions.com/\n    switch (offsetHoursFraction) {\n      case '.00': offsetHoursFraction = ''; break;\n      case '.25': offsetHoursFraction = `¼`; break;\n      case '.50': offsetHoursFraction = `½`; break;\n      case '.75': offsetHoursFraction = `¾`; break;\n    }\n\n    return `UTC${offsetSign}${offsetHours || ''}${offsetHoursFraction}`;\n  }\n\n  private renderSwitchModal() {\n    let value = '';\n    switch (this.state.modal) {\n      case 'left': value = this.state.leftTimeZone.name; break;\n      case 'right': value = this.state.rightTimeZone.name; break;\n    }\n\n    return (\n      <div className=\"modal\">\n        Switch the {this.state.modal} time zone to:\n        <select value={value} onChange={this.handleSwitchTimeZoneSelectChange} size={20}>\n          {moment.tz.names().map(n => <option value={n}>{n} {this.renderUtcOffset(moment.tz.zone(n)!)}</option>)}\n        </select>\n        <button onClick={this.handleCloseModalButtonClick}>Close</button>\n      </div>\n    );\n  }\n\n  private readonly handleSwitchLeftTimeZoneButtonClick = () => {\n    this.setState({ modal: 'left' });\n  };\n\n  private readonly handleSwitchRightTimeZoneButtonClick = () => {\n    this.setState({ modal: 'right' });\n  };\n\n  private readonly handleSwitchTimeZoneSelectChange: ChangeEventHandler<HTMLSelectElement> = event => {\n    const tz = moment.tz.zone(event.currentTarget.value)!;\n    switch (this.state.modal) {\n      case 'left': this.setState({ leftTimeZone: tz, modal: null }); return;\n      case 'right': this.setState({ rightTimeZone: tz, modal: null }); return;\n    }\n\n    throw new Error('Called in an invalid state.');\n  };\n\n  private readonly handleCloseModalButtonClick = () => {\n    this.setState({ modal: null });\n  }\n\n  render() {\n    // Note that a reference to `tz` needs to be kept otherwise it gets compiled away even though it is needed for `moment.tz`\n    void tz;\n    return (\n      <>\n        <BigCalendar localizer={App.localizer} events={App.events} components={this.components} defaultView=\"week\" />\n        {this.state.modal && createPortal(this.renderSwitchModal(), document.body)}\n      </>\n    );\n  }\n};\n","import './index.css';\nimport React from 'react';\nimport { render } from 'react-dom';\nimport App from './App';\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}